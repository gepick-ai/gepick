diff --git a/dist/shared/getChannelBots.js b/dist/shared/getChannelBots.js
index 82c3e82a43209baca7493d573531c8c13f680427..309fdeed637b9d22040886fb9ec704c56419d82a 100644
--- a/dist/shared/getChannelBots.js
+++ b/dist/shared/getChannelBots.js
@@ -1,17 +1,17 @@
 "use strict";
 var __rest = (this && this.__rest) || function (s, e) {
-    var t = {};
-    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
-        t[p] = s[p];
-    if (s != null && typeof Object.getOwnPropertySymbols === "function")
-        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
-            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
-                t[p[i]] = s[p[i]];
-        }
-    return t;
+  var t = {};
+  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+    t[p] = s[p];
+  if (s != null && typeof Object.getOwnPropertySymbols === "function")
+    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
+      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
+        t[p[i]] = s[p[i]];
+    }
+  return t;
 };
 var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
+  return (mod && mod.__esModule) ? mod : { "default": mod };
 };
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.cleanChannelBots = void 0;
@@ -23,69 +23,69 @@ const __1 = require("..");
 const getBottenderConfig_1 = __importDefault(require("./getBottenderConfig"));
 let channelBots = [];
 function cleanChannelBots() {
-    channelBots = [];
+  channelBots = [];
 }
 exports.cleanChannelBots = cleanChannelBots;
-function getChannelBots() {
-    if (channelBots.length > 0) {
-        return channelBots;
+async function getChannelBots() {
+  if (channelBots.length > 0) {
+    return channelBots;
+  }
+  const bottenderConfig = getBottenderConfig_1.default();
+  const { initialState, plugins, channels = {}, } = lodash_1.merge(bottenderConfig);
+  const sessionStore = __1.getSessionStore();
+  const Entry = await import(path_1.default.resolve('dist/index.js'));
+  let ErrorEntry;
+  try {
+    ErrorEntry = await import(path_1.default.resolve('_error.js'));
+  }
+  catch (err) { }
+  function initializeBot(bot) {
+    if (initialState) {
+      bot.setInitialState(initialState);
     }
-    const bottenderConfig = getBottenderConfig_1.default();
-    const { initialState, plugins, channels = {}, } = lodash_1.merge(bottenderConfig);
-    const sessionStore = __1.getSessionStore();
-    const Entry = require(path_1.default.resolve('index.js'));
-    let ErrorEntry;
-    try {
-        ErrorEntry = require(path_1.default.resolve('_error.js'));
+    if (plugins) {
+      plugins.forEach((plugin) => {
+        bot.use(plugin);
+      });
     }
-    catch (err) { }
-    function initializeBot(bot) {
-        if (initialState) {
-            bot.setInitialState(initialState);
-        }
-        if (plugins) {
-            plugins.forEach((plugin) => {
-                bot.use(plugin);
-            });
-        }
-        bot.onEvent(Entry);
-        if (ErrorEntry) {
-            bot.onError(ErrorEntry);
-        }
+    bot.onEvent(Entry);
+    if (ErrorEntry) {
+      bot.onError(ErrorEntry);
     }
-    channelBots = Object.entries(channels)
-        .filter(([, { enabled }]) => enabled)
-        .map((_a) => {
-        var [channel, _b] = _a, { path: webhookPath, sync, onRequest, connector } = _b, connectorConfig = __rest(_b, ["path", "sync", "onRequest", "connector"]);
-        let channelConnector;
-        if ([
-            'messenger',
-            'line',
-            'telegram',
-            'slack',
-            'viber',
-            'whatsapp',
-        ].includes(channel)) {
-            const ChannelConnector = require(`../${channel}/${messaging_api_common_1.pascalcase(channel)}Connector`).default;
-            channelConnector = new ChannelConnector(connectorConfig);
-        }
-        else {
-            invariant_1.default(connector, `The connector of ${channel} is missing.`);
-            channelConnector = connector;
-        }
-        const channelBot = new __1.Bot({
-            sessionStore,
-            sync,
-            onRequest,
-            connector: channelConnector,
-        });
-        initializeBot(channelBot);
-        return {
-            webhookPath: webhookPath || `/webhooks/${channel}`,
-            bot: channelBot,
-        };
+  }
+  channelBots = Object.entries(channels)
+    .filter(([, { enabled }]) => enabled)
+    .map((_a) => {
+      var [channel, _b] = _a, { path: webhookPath, sync, onRequest, connector } = _b, connectorConfig = __rest(_b, ["path", "sync", "onRequest", "connector"]);
+      let channelConnector;
+      if ([
+        'messenger',
+        'line',
+        'telegram',
+        'slack',
+        'viber',
+        'whatsapp',
+      ].includes(channel)) {
+        const ChannelConnector = require(`../${channel}/${messaging_api_common_1.pascalcase(channel)}Connector`).default;
+        channelConnector = new ChannelConnector(connectorConfig);
+      }
+      else {
+        invariant_1.default(connector, `The connector of ${channel} is missing.`);
+        channelConnector = connector;
+      }
+      const channelBot = new __1.Bot({
+        sessionStore,
+        sync,
+        onRequest,
+        connector: channelConnector,
+      });
+      initializeBot(channelBot);
+      return {
+        webhookPath: webhookPath || `/webhooks/${channel}`,
+        bot: channelBot,
+      };
     });
-    return channelBots;
+  return channelBots;
 }
 exports.default = getChannelBots;
 //# sourceMappingURL=getChannelBots.js.map
\ No newline at end of file
